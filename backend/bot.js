/**
  üìÅ File: bot.js
  üßë‚Äçüíª Developed by: Elyoo (NotElyoo)
  üì¨ Contact: contact@miyeon.fr
 */

  const { Client, GatewayIntentBits, SlashCommandBuilder } = require('discord.js');
  require('dotenv').config();
  const fs = require('fs');
  const path = require('path');
  const sendMessage = require('./utils/sendMessage');
  const sendChatMessage = require('./utils/sendChatMessage');
  const timeoutUser = require('./utils/timeoutUser');
  const tmi = require('tmi.js');
  const getTimezone = require('./utils/getTimezone');
  const moment = require('moment-timezone');
  const { startLiveWatcher } = require('./utils/liveWatcher');
  const { getCommandResponse } = require('./utils/customCommands');
  const { getBlacklist, programBlacklistTimeout } = require('./utils/blacklistManager');
  
  const filesToCheck = [
    { path: path.join(__dirname, 'customCommands.json'), defaultContent: '{}' },
    { path: path.join(__dirname, 'blacklistedUsers.json'), defaultContent: '{}' },
    { path: path.join(__dirname, 'userTimezones.json'), defaultContent: '{}' },
    { path: path.join(__dirname, 'config.json'), defaultContent: '{\n  "discordAnnounceChannelId": ""\n}' }
];

let missingFiles = 0;

filesToCheck.forEach(file => {
    if (!fs.existsSync(file.path)) {
        console.log(`üìÑ Fichier manquant d√©tect√© : ${path.basename(file.path)}. Cr√©ation automatique...`);
        fs.writeFileSync(file.path, file.defaultContent, 'utf8');
        missingFiles++;
    }
});

if (missingFiles === 0) {
    console.log('‚úÖ Tous les fichiers n√©cessaires sont en place.');
} else {
    console.log(`‚úÖ Tous les fichiers n√©cessaires sont maintenant cr√©√©s (${missingFiles} fichier(s) ajout√©(s)).`);
}
  
  const twitchClient = new tmi.Client({
      identity: {
          username: process.env.TWITCH_BOT_USERNAME,
          password: process.env.TWITCH_OAUTH_TOKEN,
      },
      channels: [process.env.TWITCH_CHANNEL]
  });
  
  twitchClient.on('message', (channel, tags, message, self) => {
      if (self) return;
  
      const trimmedMessage = message.trim();
  
      if (trimmedMessage === '!heure') {
          const timezone = getTimezone();
  
          if (!timezone) {
              sendMessage(process.env.TWITCH_CHANNEL, `Aucun fuseau horaire n'a √©t√© d√©fini. Veuillez le configurer via la commande /heure sur Discord.`);
              return;
          }
  
          const currentTime = moment().tz(timezone).format('HH[H]mm');
          sendMessage(process.env.TWITCH_CHANNEL, `üïê Il est ${currentTime} √† ${timezone.split("/")[1]}`);
          return;
      }
  
      if (trimmedMessage.startsWith('!')) {
          const commandName = trimmedMessage.slice(1).toLowerCase();
          const response = getCommandResponse(commandName);
  
          if (response) {
              sendChatMessage(response);
          }
      }
  });
  
  twitchClient.connect().then(() => {
      console.log('‚úÖ Bot Twitch connect√© au canal');
  }).catch(console.error);
  
  console.log("\n====================================");
  console.log("üöÄ D√âMARRAGE DU BOT DISCORD...");
  console.log("====================================\n");
  
  const discordClient = new Client({
      intents: [
          GatewayIntentBits.Guilds,
          GatewayIntentBits.GuildMessages,
          GatewayIntentBits.MessageContent
      ]
  });
  
  console.log("üìÅ Chargement des commandes...");
  const commandFiles = fs.readdirSync('./commands').filter(file => file.endsWith('.js'));
  
  if (commandFiles.length === 0) {
      console.warn("‚ö†Ô∏è Aucune commande trouv√©e.");
  } else {
      console.log(`‚úÖ ${commandFiles.length} commande(s) d√©tect√©e(s) :`, commandFiles);
  }
  
  const commandModules = commandFiles.map(file => {
      try {
          return require(`./commands/${file}`);
      } catch (error) {
          console.error(`‚ùå Erreur lors du chargement de ${file} :`, error);
          return null;
      }
  }).filter(Boolean);
  
  discordClient.once('ready', async () => {
      console.log(`\n‚úÖ Connect√© en tant que ${discordClient.user.tag}`);
  
      try {
          console.log("üîÑ Enregistrement des commandes Slash...");
          const slashCommands = commandModules.map(commandModule => {
              const slashCommand = new SlashCommandBuilder()
                  .setName(commandModule.name)
                  .setDescription(commandModule.description);
  
              if (Array.isArray(commandModule.options)) {
                  commandModule.options.forEach(option => {
                      if (option.type === 'STRING') {
                          slashCommand.addStringOption(opt =>
                              opt.setName(option.name)
                                  .setDescription(option.description)
                                  .setRequired(option.required)
                          );
                      } else if (option.type === 'INTEGER') {
                          slashCommand.addIntegerOption(opt =>
                              opt.setName(option.name)
                                  .setDescription(option.description)
                                  .setRequired(option.required)
                          );
                      }
                  });
              }
  
              return slashCommand;
          });
  
          await discordClient.application.commands.set([]);
          console.log("üßπ Commandes Slash supprim√©es.");
  
          await discordClient.application.commands.set(slashCommands);
          console.log("‚úÖ Nouvelles commandes Slash enregistr√©es !");
      } catch (error) {
          console.error("‚ùå Erreur lors de l'enregistrement des commandes Slash :", error);
      }
  
      console.log("\nüîç V√©rification des services externes...");
      try {
          const twitchClientId = process.env.TWITCH_CLIENT_ID;
          const twitchOAuth = process.env.TWITCH_OAUTH_TOKEN;
  
          if (!twitchClientId || !twitchOAuth) {
              console.warn("‚ö†Ô∏è Cl√©s API Twitch non trouv√©es. V√©rifie ton fichier .env.");
          } else {
              console.log("‚úÖ Connexion API Twitch : Cl√©s trouv√©es.");
          }
  
      } catch (error) {
          console.error("‚ùå Erreur lors de la v√©rification des services externes :", error);
      }
  
      console.log("\nüöÄ BOT OP√âRATIONNEL !\n====================================\n");
  
      startLiveWatcher(discordClient);
  
      startBlacklistTimers();
  });
  
  discordClient.on('interactionCreate', async (interaction) => {
      if (!interaction.isChatInputCommand()) return;
  
      const command = interaction.commandName;
      const cmd = commandModules.find(cmd => cmd.name === command);
      if (!cmd) {
          console.warn(`‚ö†Ô∏è Commande inconnue : ${command}`);
          return;
      }
  
      try {
          await cmd.run(interaction);
      } catch (error) {
          console.error(`‚ùå Erreur lors de l'ex√©cution de ${command} :`, error);
          await interaction.reply({ content: '‚ùå Une erreur est survenue lors de l‚Äôex√©cution de cette commande.', ephemeral: true });
      }
  });
  
  discordClient.login(process.env.DISCORD_TOKEN);
  
  function startBlacklistTimers() {
      console.log("üîÑ Programmation des timeouts automatiques pour les blacklist√©s");
  
      const blacklist = getBlacklist();
  
      for (const pseudo of Object.keys(blacklist)) {
          programBlacklistTimeout(pseudo);
      }
  }  